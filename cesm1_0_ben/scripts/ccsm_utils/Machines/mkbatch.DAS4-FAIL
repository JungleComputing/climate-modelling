#! /bin/csh -f

set mach = DAS4

#################################################################################
if ($PHASE == set_batch) then
#################################################################################

source ./Tools/ccsm_getenv || exit -1

set ntasks  = `${UTILROOT}/Tools/taskmaker.pl -sumonly`
set maxthrds = `${UTILROOT}/Tools/taskmaker.pl -maxthrds`
@ nodes = $ntasks / ${MAX_TASKS_PER_NODE}
if ( $ntasks % ${MAX_TASKS_PER_NODE} > 0) then
  @ nodes = $nodes + 1
  @ ntasks = $nodes * ${MAX_TASKS_PER_NODE}
endif
@ taskpernode = ${MAX_TASKS_PER_NODE} / ${maxthrds}
set qname = batch
set tlimit = "00:59:00"

#--- Job name is first fifteen characters of case name ---
set jobname = `echo ${CASE} | cut -c1-15`

cat >! $CASEROOT/${CASE}.${mach}.run << EOF1
#!/bin/csh -f

#$ -N test1
#$ -pe openmpi 16
#$ -l h_rt=1:00:00
#$ -cwd

#limit coredumpsize 1000000
#limit stacksize unlimited

#module add openmpi/intel/64/1.4.2
#module add netcdf/intel/64/4.1.1

# Make new hostfile specifying the cores per node wanted
set ncores = 8
set HOSTFILE=$TMPDIR/hosts

foreach host (`uniq $TMPDIR/machines`)
    echo $host slots=$ncores >> $HOSTFILE
end

set nhosts = `wc -l < $HOSTFILE`
set totcores = `expr $nhosts \* $ncores`

echo $nhosts $totcores

# Use regular ssh-based startup instead of OpenMPI/SGE native one
unset PE_HOSTFILE
set PATH=/usr/bin:$PATH

EOF1

#################################################################################
else if ($PHASE == set_exe) then
#################################################################################

set maxthrds = `${UTILROOT}/Tools/taskmaker.pl -maxthrds`
set maxtasks = `${UTILROOT}/Tools/taskmaker.pl -sumtasks`

cat >> ${CASEROOT}/${CASE}.${MACH}.run << EOF1
# -------------------------------------------------------------------------
# Run the model
# -------------------------------------------------------------------------

sleep 25
cd \$RUNDIR
echo "\`date\` -- CSM EXECUTION BEGINS HERE" 

setenv OMP_NUM_THREADS ${maxthrds}
#mpiexec -n ${maxtasks} ./ccsm.exe >&! ccsm.log.\$LID
#mpirun -np ${maxtasks} ./ccsm.exe >&! ccsm.log.\$LID

mpirun -np $totcores --hostfile $HOSTFILE ./ccsm.exe >&! ccsm.log.$LID

wait
echo "\`date\` -- CSM EXECUTION HAS FINISHED" 

EOF1

#################################################################################
else if ($PHASE == set_larch) then
#################################################################################


   #This is a place holder for a long-term archiving script


#################################################################################
else
#################################################################################

    echo "mkscripts.$mach"
    echo "  PHASE setting of $PHASE is not an accepted value"
    echo "  accepted values are set_batch, set_exe and set_larch"
    exit 1

#################################################################################
endif
#################################################################################
