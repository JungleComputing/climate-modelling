//int IMPI_Add_error_class ( int *errorclass );
//int IMPI_Add_error_code ( int errorclass, int *errorcode );
//int IMPI_Add_error_string ( int errorcode, char *string );
//int IMPI_Alloc_mem ( MPI_Aint size, MPI_Info info, void *baseptr );
//int IMPI_Comm_accept ( char *port_name, MPI_Info info, int root, MPI_Comm comm, MPI_Comm *newcomm );
//int IMPI_Comm_connect ( char *port_name, MPI_Info info, int root, MPI_Comm comm, MPI_Comm *newcomm );
//int IMPI_Comm_create_errhandler ( MPI_Comm_errhandler_fn *function, MPI_Errhandler *errhandler );
//int IMPI_Comm_create_keyval ( MPI_Comm_copy_attr_function *comm_copy_attr_fn, MPI_Comm_delete_attr_function *comm_delete_attr_fn, int *comm_keyval, void *extra_state );
//int IMPI_Comm_delete_attr ( MPI_Comm comm, int comm_keyval );
//int IMPI_Comm_disconnect ( MPI_Comm *comm );
//int IMPI_Comm_get_attr ( MPI_Comm comm, int comm_keyval, void *attribute_val, int *flag );
//int IMPI_Comm_spawn ( char *command, char *argv[], int maxprocs, MPI_Info info, int root, MPI_Comm comm, MPI_Comm *intercomm, int array_of_errcodes[] );
//int IMPI_Comm_spawn_multiple ( int count, char *array_of_commands[], char* *array_of_argv[], int array_of_maxprocs[], MPI_Info array_of_info[], int root, MPI_Comm comm, MPI_Comm *intercomm, int array_of_errcodes[] );
//int IMPI_File_call_errhandler ( MPI_File fh, int errorcode );
//int IMPI_File_close ( MPI_File *mpi_fh );
//int IMPI_File_create_errhandler ( MPI_File_errhandler_fn *function, MPI_Errhandler *errhandler );
//int IMPI_File_delete ( char *filename, MPI_Info info );
//int IMPI_File_get_amode ( MPI_File mpi_fh, int *amode );
//int IMPI_File_get_atomicity ( MPI_File mpi_fh, int *flag );
//int IMPI_File_get_byte_offset ( MPI_File mpi_fh, MPI_Offset offset, MPI_Offset *disp );
//int IMPI_File_get_errhandler ( MPI_File file, MPI_Errhandler *errhandler );
//int IMPI_File_get_group ( MPI_File mpi_fh, MPI_Group *g );
//int IMPI_File_get_info ( MPI_File mpi_fh, MPI_Info *info_used );
//int IMPI_File_get_position ( MPI_File mpi_fh, MPI_Offset *offset );
//int IMPI_File_get_position_shared ( MPI_File mpi_fh, MPI_Offset *offset );
//int IMPI_File_get_size ( MPI_File mpi_fh, MPI_Offset *size );
//int IMPI_File_get_type_extent ( MPI_File mpi_fh, MPI_Datatype datatype, MPI_Aint *extent );
//int IMPI_File_get_view ( MPI_File mpi_fh, MPI_Offset *disp, MPI_Datatype *etype, MPI_Datatype *filetype, char *datarep );
//int IMPI_File_iread_at ( MPI_File mpi_fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPIO_Request *r );
//int IMPI_File_iread ( MPI_File mpi_fh, void *buf, int count, MPI_Datatype datatype, MPI_Request *r );
//int IMPI_File_iread_shared ( MPI_File mpi_fh, void *buf, int count, MPI_Datatype datatype, MPI_Request *r );
//int IMPI_File_iwrite_at ( MPI_File mpi_fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPIO_Request *r );
//int IMPI_File_iwrite ( MPI_File mpi_fh, void *buf, int count, MPI_Datatype datatype, MPI_Request *r );
//int IMPI_File_iwrite_shared ( MPI_File mpi_fh, void *buf, int count, MPI_Datatype datatype, MPIO_Request *r );
//int IMPI_File_open ( MPI_Comm comm, char *filename, int amode, MPI_Info info, MPI_File *fh );
//int IMPI_File_preallocate ( MPI_File mpi_fh, MPI_Offset size );
//int IMPI_File_read_all_begin ( MPI_File mpi_fh, void *buf, int count, MPI_Datatype datatype );
//int IMPI_File_read_all_end ( MPI_File mpi_fh, void *buf, MPI_Status *status );
//int IMPI_File_read_all ( MPI_File mpi_fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status );
//int IMPI_File_read_at_all_begin ( MPI_File mpi_fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype );
//int IMPI_File_read_at_all_end ( MPI_File mpi_fh, void *buf, MPI_Status *status );
//int IMPI_File_read_at_all ( MPI_File mpi_fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Status *status );
//int IMPI_File_read_at ( MPI_File mpi_fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Status *status );
//int IMPI_File_read ( MPI_File mpi_fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status );
//int IMPI_File_read_ordered_begin ( MPI_File mpi_fh, void *buf, int count, MPI_Datatype datatype );
//int IMPI_File_read_ordered_end ( MPI_File mpi_fh, void *buf, MPI_Status *status );
//int IMPI_File_read_ordered ( MPI_File mpi_fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status );
//int IMPI_File_read_shared ( MPI_File mpi_fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status );
//int IMPI_File_seek ( MPI_File mpi_fh, MPI_Offset offset, int whence );
//int IMPI_File_seek_shared ( MPI_File mpi_fh, MPI_Offset offset, int whence );
//int IMPI_File_set_atomicity ( MPI_File mpi_fh, int flag );
//int IMPI_File_set_errhandler ( MPI_File file, MPI_Errhandler errhandler );
//int IMPI_File_set_info ( MPI_File mpi_fh, MPI_Info info );
//int IMPI_File_set_size ( MPI_File mpi_fh, MPI_Offset size );
//int IMPI_File_set_view ( MPI_File mpi_fh, MPI_Offset disp, MPI_Datatype etype, MPI_Datatype filetype, char *datarep, MPI_Info info );
//int IMPI_File_sync ( MPI_File mpi_fh );
//int IMPI_File_write_all_begin ( MPI_File mpi_fh, void *buf, int count, MPI_Datatype datatype );
//int IMPI_File_write_all_end ( MPI_File mpi_fh, void *buf, MPI_Status *status );
//int IMPI_File_write_all ( MPI_File mpi_fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status );
//int IMPI_File_write_at_all_begin ( MPI_File mpi_fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype );
//int IMPI_File_write_at_all_end ( MPI_File mpi_fh, void *buf, MPI_Status *status );
//int IMPI_File_write_at_all ( MPI_File mpi_fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Status *status );
//int IMPI_File_write_at ( MPI_File mpi_fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Status *status );
//int IMPI_File_write ( MPI_File mpi_fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status );
//int IMPI_File_write_ordered_begin ( MPI_File mpi_fh, void *buf, int count, MPI_Datatype datatype );
//int IMPI_File_write_ordered_end ( MPI_File mpi_fh, void *buf, MPI_Status *status );
//int IMPI_File_write_ordered ( MPI_File mpi_fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status );
//int IMPI_File_write_shared ( MPI_File mpi_fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status );
//int IMPI_Get ( void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win );
//int IMPI_Grequest_complete ( MPI_Request r );
//int IMPI_Grequest_start ( MPI_Grequest_query_function *query_fn, MPI_Grequest_free_function *free_fn, MPI_Grequest_cancel_function *cancel_fn, void *extra_state, MPI_Request *r );
//int IMPI_Info_create ( MPI_Info *info );
//int IMPI_Info_delete ( MPI_Info info, char *key );
//int IMPI_Info_dup ( MPI_Info info, MPI_Info *newinfo );
//int IMPI_Info_free ( MPI_Info *info );
//int IMPI_Info_get ( MPI_Info info, char *key, int valuelen, char *value, int *flag );
//int IMPI_Info_get_nkeys ( MPI_Info info, int *nkeys );
//int IMPI_Info_get_nthkey ( MPI_Info info, int n, char *key );
//int IMPI_Info_get_valuelen ( MPI_Info info, char *key, int *valuelen, int *flag );
//int IMPI_Info_set ( MPI_Info info, char *key, char *value );
//int IMPI_Lookup_name ( char *service_name, MPI_Info info, char *port_name );
//int IMPI_Open_port ( MPI_Info info, char *port_name );
//int IMPI_Pack_external ( char *datarep, void *inbuf, int incount, MPI_Datatype datatype, void *outbuf, MPI_Aint outcount, MPI_Aint *position );
//int IMPI_Pack_external_size ( char *datarep, int incount, MPI_Datatype datatype, MPI_Aint *size );
//int IMPI_Publish_name ( char *service_name, MPI_Info info, char *port_name );
//int IMPI_Put ( void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win );
//int IMPI_Register_datarep ( char *name, MPI_Datarep_conversion_function *read_conv_fn, MPI_Datarep_conversion_function *write_conv_fn, MPI_Datarep_extent_function *extent_fn, void *state );
//int IMPI_Type_create_darray ( int size, int rank, int ndims, int array_of_gsizes[], int array_of_distribs[], int array_of_dargs[], int array_of_psizes[], int order, MPI_Datatype oldtype, MPI_Datatype *newtype );
//int IMPI_Type_create_f90_complex ( int p, int r, MPI_Datatype *newtype );
//int IMPI_Type_create_f90_integer ( int r, MPI_Datatype *newtype );
//int IMPI_Type_create_f90_real ( int p, int r, MPI_Datatype *newtype );
//int IMPI_Type_create_hindexed ( int count, int blocklengths[], MPI_Aint displacements[], MPI_Datatype oldtype, MPI_Datatype *newtype );
//int IMPI_Type_create_hvector ( int count, int blocklength, MPI_Aint stride, MPI_Datatype oldtype, MPI_Datatype *newtype );
//int IMPI_Type_create_indexed_block ( int count, int blocklength, int array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype *newtype );
//int IMPI_Type_create_keyval ( MPI_Type_copy_attr_function *type_copy_attr_fn, MPI_Type_delete_attr_function *type_delete_attr_fn, int *type_keyval, void *extra_state );
//int IMPI_Type_create_resized ( MPI_Datatype oldtype, MPI_Aint lb, MPI_Aint extent, MPI_Datatype *newtype );
//int IMPI_Type_create_struct ( int count, int array_of_blocklengths[], MPI_Aint array_of_displacements[], MPI_Datatype array_of_types[], MPI_Datatype *newtype );
//int IMPI_Type_create_subarray ( int ndims, int array_of_sizes[], int array_of_subsizes[], int array_of_starts[], int order, MPI_Datatype oldtype, MPI_Datatype *newtype );
//int IMPI_Type_delete_attr ( MPI_Datatype type, int type_keyval );
//int IMPI_Type_dup ( MPI_Datatype datatype, MPI_Datatype *newtype );
//int IMPI_Type_extent ( MPI_Datatype datatype, MPI_Aint *extent );
//int IMPI_Type_free ( MPI_Datatype *datatype );
//int IMPI_Type_free_keyval ( int *type_keyval );
//int IMPI_Type_get_attr ( MPI_Datatype type, int type_keyval, void *attribute_val, int *flag );
//int IMPI_Type_get_contents ( MPI_Datatype datatype, int max_integers, int max_addresses, int max_datatypes, int array_of_integers[], MPI_Aint array_of_addresses[], MPI_Datatype array_of_datatypes[] );
//int IMPI_Type_get_envelope ( MPI_Datatype datatype, int *num_integers, int *num_addresses, int *num_datatypes, int *combiner );
//int IMPI_Type_get_extent ( MPI_Datatype datatype, MPI_Aint *lb, MPI_Aint *extent );
//int IMPI_Type_get_name ( MPI_Datatype datatype, char *type_name, int *resultlen );
//int IMPI_Type_get_true_extent ( MPI_Datatype datatype, MPI_Aint *true_lb, MPI_Aint *true_extent );
//int IMPI_Type_lb ( MPI_Datatype datatype, MPI_Aint *displacement );
//int IMPI_Type_match_size ( int typeclass, int size, MPI_Datatype *datatype );
//int IMPI_Type_set_attr ( MPI_Datatype type, int type_keyval, void *attribute_val );
//int IMPI_Type_set_name ( MPI_Datatype type, char *type_name );
//int IMPI_Type_size ( MPI_Datatype datatype, int *size );
//int IMPI_Type_ub ( MPI_Datatype datatype, MPI_Aint *displacement );
//int IMPI_Unpack_external ( char *datarep, void *inbuf, MPI_Aint insize, MPI_Aint *position, void *outbuf, int outcount, MPI_Datatype datatype );
//int IMPI_Unpublish_name ( char *service_name, MPI_Info info, char *port_name );
//int IMPI_Win_call_errhandler ( MPI_Win win, int errorcode );
//int IMPI_Win_complete ( MPI_Win win );
//int IMPI_Win_create_errhandler ( MPI_Win_errhandler_fn *function, MPI_Errhandler *errhandler );
//int IMPI_Win_create ( void *base, MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm, MPI_Win *win );
//int IMPI_Win_create_keyval ( MPI_Win_copy_attr_function *win_copy_attr_fn, MPI_Win_delete_attr_function *win_delete_attr_fn, int *win_keyval, void *extra_state );
//int IMPI_Win_delete_attr ( MPI_Win win, int win_keyval );
//int IMPI_Win_fence ( int assert, MPI_Win win );
//int IMPI_Win_free ( MPI_Win *win );
//int IMPI_Win_free_keyval ( int *win_keyval );
//int IMPI_Win_get_attr ( MPI_Win win, int win_keyval, void *attribute_val, int *flag );
//int IMPI_Win_get_errhandler ( MPI_Win win, MPI_Errhandler *errhandler );
//int IMPI_Win_get_group ( MPI_Win win, MPI_Group *g );
//int IMPI_Win_get_name ( MPI_Win win, char *win_name, int *resultlen );
//int IMPI_Win_lock ( int lock_type, int rank, int assert, MPI_Win win );
//int IMPI_Win_post ( MPI_Group g, int assert, MPI_Win win );
//int IMPI_Win_set_attr ( MPI_Win win, int win_keyval, void *attribute_val );
//int IMPI_Win_set_errhandler ( MPI_Win win, MPI_Errhandler errhandler );
//int IMPI_Win_set_name ( MPI_Win win, char *win_name );
//int IMPI_Win_start ( MPI_Group g, int assert, MPI_Win win );
//int IMPI_Win_test ( MPI_Win win, int *flag );
//int IMPI_Win_unlock ( int rank, MPI_Win win );
//int IMPI_Win_wait ( MPI_Win win );
